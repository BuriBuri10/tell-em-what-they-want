script 1
---------
<script>
        // --- LOG FETCHING SCRIPT ---
        function fetchLogs() {
            // This is a mock fetch function for demonstration.
            // Replace with your actual '/logs' endpoint.
            const mockLogs = [
                `[${new Date().toISOString()}] INFO: Initializing campaign for user_123.`,
                `[${new Date().toISOString()}] DEBUG: Query received: "Promote next-gen eco-friendly sneakers".`,
                `[${new Date().toISOString()}] INFO: Analyzing target audience segments.`,
                `[${new Date().toISOString()}] INFO: Generating ad copy variants.`,
                `[${new Date().toISOString()}] WARN: Budget limit approaching for social media spend.`,
                `[${new Date().toISOString()}] INFO: Deploying assets to production CDN.`,
                `[${new Date().toISOString()}] SUCCESS: Campaign 'Eco-Sneakers Q3' is now live.`
            ];
            const logsElement = document.getElementById("logs");
            // Simulate new logs appearing
            const newLog = mockLogs[Math.floor(Math.random() * mockLogs.length)];
            const currentText = logsElement.innerText;
             if (currentText === 'Initializing log stream... waiting for data.') {
                logsElement.innerText = newLog + '\n';
            } else {
                logsElement.innerText += newLog + '\n';
            }
            // Auto-scroll to the bottom
            logsElement.scrollTop = logsElement.scrollHeight;
        }

        // Fetch logs every 2 seconds for demonstration
        setInterval(fetchLogs, 2000);

        // --- ANIMATION SCRIPT ---
        document.addEventListener('DOMContentLoaded', () => {
            gsap.registerPlugin(ScrollTrigger);

            // Animate elements with the .reveal class
            const revealElements = document.querySelectorAll('.reveal');

            revealElements.forEach((el, index) => {
                gsap.to(el, {
                    opacity: 1,
                    y: 0,
                    duration: 1.2,
                    ease: 'power3.out',
                    scrollTrigger: {
                        trigger: el,
                        start: 'top 90%', // When the top of the element is 90% from the top of the viewport
                        toggleActions: 'play none none none',
                        // markers: true, // Uncomment for debugging
                    },
                    // Add a slight delay to the initial hero elements for a staggered effect
                    delay: el.closest('section.text-center') ? index * 0.15 : 0
                });
            });
        });
    </script>





    script 2
    -------
<script>
        // --- LOG FETCHING SCRIPT ---
        function fetchLogs() {
            // This is a mock fetch function for demonstration.
            // Replace with your actual '/logs' endpoint.
            const mockLogs = [
                `[${new Date().toISOString()}] INFO: Initializing campaign for user_123.`,
                `[${new Date().toISOString()}] DEBUG: Query received: "Promote next-gen eco-friendly sneakers".`,
                `[${new Date().toISOString()}] INFO: Analyzing target audience segments.`,
                `[${new Date().toISOString()}] INFO: Generating ad copy variants.`,
                `[${new Date().toISOString()}] WARN: Budget limit approaching for social media spend.`,
                `[${new Date().toISOString()}] INFO: Deploying assets to production CDN.`,
                `[${new Date().toISOString()}] SUCCESS: Campaign 'Eco-Sneakers Q3' is now live.`
            ];
            const logsElement = document.getElementById("logs");
            // Simulate new logs appearing
            const newLog = mockLogs[Math.floor(Math.random() * mockLogs.length)];
            const currentText = logsElement.innerText;
             if (currentText === 'Initializing log stream... waiting for data.') {
                logsElement.innerText = newLog + '\n';
            } else {
                logsElement.innerText += newLog + '\n';
            }
            // Auto-scroll to the bottom
            logsElement.scrollTop = logsElement.scrollHeight;
        }

        // Fetch logs every 2 seconds for demonstration
        setInterval(fetchLogs, 2000);

        // --- ANIMATION SCRIPT ---
        document.addEventListener('DOMContentLoaded', () => {
            gsap.registerPlugin(ScrollTrigger);

            // Animate elements with the .reveal class
            const revealElements = document.querySelectorAll('.reveal');

            revealElements.forEach((el, index) => {
                gsap.to(el, {
                    opacity: 1,
                    y: 0,
                    duration: 1.2,
                    ease: 'power3.out',
                    scrollTrigger: {
                        trigger: el,
                        start: 'top 90%', // When the top of the element is 90% from the top of the viewport
                        toggleActions: 'play none none none',
                        // markers: true, // Uncomment for debugging
                    },
                    // Add a slight delay to the initial hero elements for a staggered effect
                    delay: el.closest('section.text-center') ? index * 0.15 : 0
                });
            });
        });
    </script>